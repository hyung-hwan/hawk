@pragma entry main
@pragma implicit off

@include "ensure.inc";

function main()
{

	## call by reference. change an argument to array in the callee
	{
		@local ini, foo1, foo2, foo3, foo4;
	
		test1(foo1); 
		test2(foo2); 
		test3(foo3); 
		test4(foo4); 
		ensure (hawk::typename(foo1), "map", @SCRIPTNAME, @SCRIPTLINE);
		ensure (hawk::typename(foo2), "map", @SCRIPTNAME, @SCRIPTLINE);
		ensure (hawk::typename(foo3), "nil", @SCRIPTNAME, @SCRIPTLINE);
		ensure (hawk::typename(foo4), "nil", @SCRIPTNAME, @SCRIPTLINE);
		ensure (foo1[1], 1, @SCRIPTNAME, @SCRIPTLINE);
		ensure (foo2[1], 1, @SCRIPTNAME, @SCRIPTLINE);
		ensure (foo3[1], ini, @SCRIPTNAME, @SCRIPTLINE);
		ensure (foo4[1], ini, @SCRIPTNAME, @SCRIPTLINE);
	}	

	## gsub 
	{
		@local w, x, y, z, z1, z2;
		x = y = "x\\y";
		gsub(/\\\\/, "A", x);
		gsub("\\\\", "A", y);
		ensure (x, "x\\y", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, "xAy", @SCRIPTNAME, @SCRIPTLINE);

		x = y = "x\\\\y";
		gsub(/\\\\/, "A", x);
		gsub("\\\\", "A", y);
		ensure (x, "xAy", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, "xAAy", @SCRIPTNAME, @SCRIPTLINE);
	}

	## gsub - POSIX rule for &, \&, \\&, \\\& 
	{	
		@local w, x, y, z, z1, z2, z3;
		w = x = y = z = z1 = z2 = "xax";

		gsub(/a/, "\&", w);  # gsub sees &
		gsub(/a/, "\\&", x);   # gsub sees \&
		gsub(/a/, "\\\&", y);   # gsub sees \&

		gsub(/a/, "\\\\&", z);  # gsub sees \\&
		gsub(/a/, "\\\\\&", z1); # gsub sees \\&
		gsub(/a/, "\\\\\\&", z2); # gsub sees \\\&

		ensure (w, "xax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (x, "x&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, "x&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z, "x\\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z1, "x\\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z2, "x\\&x", @SCRIPTNAME, @SCRIPTLINE);

		w = x = y = z = z1 = z2 = "xaax";

		gsub(/a/, "\&", w);  # gsub sees &
		gsub(/a/, "\\&", x);   # gsub sees \&
		gsub(/a/, "\\\&", y);   # gsub sees \&

		gsub(/a/, "\\\\&", z);  # gsub sees \\&
		gsub(/a/, "\\\\\&", z1); # gsub sees \\&
		gsub(/a/, "\\\\\\&", z2); # gsub sees \\\&

		ensure (w, "xaax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (x, "x&&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, "x&&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z, "x\\a\\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z1, "x\\a\\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z2, "x\\&\\&x", @SCRIPTNAME, @SCRIPTLINE);
	}

	## gsub - POSIX rule for &, \&, \\&, \\\&  - express the same test with a raw string literal
	{	
		@local w, x, y, z;
		w = x = y = z = "xax";

		gsub(/a/, @r"&", w);  # gsub sees &
		gsub(/a/, @r"\&", x);   # gsub sees \&

		gsub(/a/, @r"\\&", y);  # gsub sees \\&
		gsub(/a/, @r"\\\&", z); # gsub sees \\\&

		ensure (w, "xax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (x, "x&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, @r"x\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z, @r"x\&x", @SCRIPTNAME, @SCRIPTLINE);

		w = x = y = z = "xaax";

		gsub(/a/, @r"&", w);  # gsub sees &
		gsub(/a/, @r"\&", x);   # gsub sees \&

		gsub(/a/, @r"\\&", y);  # gsub sees \\&
		gsub(/a/, @r"\\\&", z); # gsub sees \\\&

		ensure (w, "xaax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (x, "x&&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, @r"x\a\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z, @r"x\&\&x", @SCRIPTNAME, @SCRIPTLINE);
	}

	## sub - POSIX rule for &, \&, \\&, \\\&  - express the same test with a raw string literal
	{	
		@local w, x, y, z;
		w = x = y = z = "xax";

		sub(/a/, @r"&", w);
		sub(/a/, @r"\&", x);

		sub(/a/, @r"\\&", y);
		sub(/a/, @r"\\\&", z);

		ensure (w, "xax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (x, "x&x", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, @r"x\ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z, @r"x\&x", @SCRIPTNAME, @SCRIPTLINE);

		w = x = y = z = "xaax";

		sub(/a/, @r"&", w);
		sub(/a/, @r"\&", x);

		sub(/a/, @r"\\&", y);
		sub(/a/, @r"\\\&", z);

		ensure (w, "xaax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (x, "x&ax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (y, @r"x\aax", @SCRIPTNAME, @SCRIPTLINE);
		ensure (z, @r"x\&ax", @SCRIPTNAME, @SCRIPTLINE);
	}


	{
		@local pi, e, tmp;

		pi = 3.1415927;

		ensure (sprintf("%.10d:%.10x", 5, 14), "0000000005:000000000e", @SCRIPTNAME,  @SCRIPTLINE);

		ensure (sprintf("cos(%f) = %f", pi/4, cos(pi/4)), "cos(0.785398) = 0.707107", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("sin(%f) = %f", pi/4, sin(pi/4)), "sin(0.785398) = 0.707107", @SCRIPTNAME, @SCRIPTLINE);

		e = exp(1);
		ensure (sprintf("e = %f", e), "e = 2.718282", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("log(e) = %f", log(e)), "log(e) = 1.000000", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("sqrt(pi ^ 2) = %f", sqrt(pi ^ 2)), "sqrt(pi ^ 2) = 3.141593", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("atan2(1, 1) = %f", atan2(1, 1)), "atan2(1, 1) = 0.785398", @SCRIPTNAME, @SCRIPTLINE);

		tmp = sprintf("%s", "hello");
		ensure ((tmp === @b"hello"), 0, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp === "hello"),   1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == @b"hello"),  1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == "hello"),    1, @SCRIPTNAME, @SCRIPTLINE);

		tmp = sprintf("%s", @b"hello");
		ensure ((tmp === @b"hello"), 0, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp === "hello"),   1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == @b"hello"),  1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == "hello"),    1, @SCRIPTNAME, @SCRIPTLINE);

		tmp = sprintf(@b"%s", "hello");
		ensure ((tmp === @b"hello"), 1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp === "hello"),   0, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == @b"hello"),  1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == "hello"),    1, @SCRIPTNAME, @SCRIPTLINE);

		tmp = sprintf(@b"%s", @b"hello");
		ensure ((tmp === @b"hello"), 1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp === "hello"),   0, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == @b"hello"),  1, @SCRIPTNAME, @SCRIPTLINE);
		ensure ((tmp == "hello"),    1, @SCRIPTNAME, @SCRIPTLINE);

		ensure (sprintf("%0d", 0),            "0",          @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%0.d", 0),           "",           @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%.d", 0),            "",           @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%.*d", 0, 0),        "",           @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%.*d", 1, 0),        "0",          @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%*d", 0, 0),         "0",          @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%*.*d", 0, 0, 0),    "",           @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%-*.*d", 0, 0, 0),   "",           @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%*.*d", 1, 0, 0),    " ",          @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%*.*d", 0, 3, 0),    "000",        @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%-*d", 0, 0),        "0",          @SCRIPTNAME,  @SCRIPTLINE);

		ensure (sprintf(@b"%0d", 0),          @b"0",        @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%0.d", 0),         @b"",         @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%.d", 0),          @b"",         @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%.*d", 0, 0),      @b"",         @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%.*d", 1, 0),      @b"0",        @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%*d", 0, 0),       @b"0",        @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%*.*d", 0, 0, 0),  @b"",         @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%-*.*d", 0, 0, 0), @b"",         @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%*.*d", 1, 0, 0),  @b" ",        @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%*.*d", 0, 3, 0),  @b"000",      @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%-*d", 0, 0),      @b"0",        @SCRIPTNAME,  @SCRIPTLINE);

		ensure (sprintf("%5d", 5),            "    5",      @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%-5d", 5),           "5    ",      @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%*d", 5, 5),         "    5",      @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%*d", -5, 5),        "5    ",      @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%-*d", 5, 5),        "5    ",      @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf("%-*d", -5, 5),       "5    ",      @SCRIPTNAME,  @SCRIPTLINE);

		ensure (sprintf(@b"%5d", 5),          @b"    5",    @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%-5d", 5),         @b"5    ",    @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%*d", 5, 5),       @b"    5",    @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%*d", -5, 5),      @b"5    ",    @SCRIPTNAME,  @SCRIPTLINE);
		ensure (sprintf(@b"%-*d", 5, 5),      @b"5    ",    @SCRIPTNAME,  @SCRIPTLINE);

		ensure (sprintf("%*sworld", 20, "hello"),        "               helloworld",   @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%*sworld", -20, "hello"),       "hello               world",   @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%-*sworld", 20, "hello"),       "hello               world",   @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%-*sworld", -20, "hello"),      "hello               world",   @SCRIPTNAME, @SCRIPTLINE);

		ensure (sprintf(@b"%*sworld", 20, "hello"),      @b"               helloworld", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%*sworld", -20, "hello"),     @b"hello               world", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%-*sworld", 20, "hello"),     @b"hello               world", @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%-*sworld", -20, "hello"),    @b"hello               world", @SCRIPTNAME, @SCRIPTLINE);

		ensure (sprintf("%0s", "hello"),                 "hello",                       @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%.0s", "hello"),                "",                            @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%0.0s", "hello"),               "",                            @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%1.0s", "hello"),               " ",                           @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%*.*s", 20, 0, "hello"),        "                    ",        @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf("%*.*s", 20, 2, "hello"),        "                  he",        @SCRIPTNAME, @SCRIPTLINE);

		ensure (sprintf(@b"%0s", "hello"),                 @b"hello",                   @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%.0s", "hello"),                @b"",                        @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%0.0s", "hello"),               @b"",                        @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%1.0s", "hello"),               @b" ",                       @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%*.*s", 20, 0, "hello"),        @b"                    ",    @SCRIPTNAME, @SCRIPTLINE);
		ensure (sprintf(@b"%*.*s", 20, 2, "hello"),        @b"                  he",    @SCRIPTNAME, @SCRIPTLINE);
	}

	{
		@local bool, b, c;

		bool = ((b = 1) in c);
		ensure (bool, 0, @SCRIPTNAME, @SCRIPTLINE);
		ensure (b, 1, @SCRIPTNAME, @SCRIPTLINE);
	}

	print "SUCCESS";
}

function test1(&foo) { test2(foo) }
function test2(&bar) { bar[1] = 1 }
function test3(foo) { test2(foo) }
function test4(bar) { bar[1] = 1 }
